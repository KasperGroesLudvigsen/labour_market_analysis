# -*- coding: utf-8 -*-
"""
Created on Sat Feb 20 17:26:30 2021

@author: groes
"""

import metoder
import pandas as pd
import numpy as np

def unittest_get_nlargest():
    column1 = [1,2,3,4,5,6,7,8,9]
    column2 = ["a", "a", "a", "a", "a", "a", "a", "a", "a"]
    
    df = pd.DataFrame(list(zip(column1, column2)), columns=["Values", "Names"])
    
    largest = metoder.get_n_largest_values(df, "Values", 3)
    
    assert largest.iloc[:][0][0] == 9
    
    
def unittest_filter_df_by_label():
    group = ["a", "b", "c", "a", "b", "c", "a", "b", "c"]
    question_label = ["q1", "q2", "q3", "q1", "q2", "q3", "q1", "q2", "q3"]
    values = np.arange(len(group))
    df = pd.DataFrame(list(zip(values, group, question_label)), columns=["Values", "Group", "Question Label"])
    list_of_labels = ["q1", "q2"]
    
    filtered_df = metoder.filter_df_by_label(df, list_of_labels)
    
    assert len(filtered_df) == 6
    assert list_of_labels.sort() == filtered_df["Question Label"].unique().sort() 
    
def unittest_get_df_for_correlation_matrix():
    group = ["a", "b", "c", "a", "b", "c", "a", "b", "c"]
    question_label = ["q1", "q2", "q3", "q1", "q2", "q3", "q1", "q2", "q3"]
    values = np.arange(len(group))
    df = pd.DataFrame(
        list(zip(values, group, question_label)),
        columns=["Values", "Group", "Question Label"])
    
    df, _ = metoder.get_df_for_correlation_analysis(
        df, set(question_label), "Question Label", "Values") 
    
    assert list(df.columns) == list(set(question_label))
    
def unittest_variables_by_distribution_new():
    gaussian = np.random.normal(size=100)
    nongaussian = np.random.exponential(size=100)
    df = pd.DataFrame(
        list(zip(gaussian, nongaussian)),
        columns=["gaussian", "nongaussian"])
    
    gaussian_var, nongaussian_var = metoder.variables_by_distribution_new(df)
    
    assert gaussian_var[0] == "gaussian"
    assert nongaussian_var[0] == "nongaussian"

def unittest_create_correlation_matrix_new():
    gaussian = np.random.normal(size=100)
    nongaussian = np.random.exponential(size=100)
    df = pd.DataFrame(
        list(zip(gaussian, nongaussian)),
        columns=["gaussian", "nongaussian"])
    
    gaussian_corr_mat, nongaussian_corr_mat = metoder.create_correlation_matrix_new(
        df, ["gaussian"], ["nongaussian"])
    
    assert gaussian_corr_mat.iloc[0,0] == 1.0
    assert nongaussian_corr_mat.iloc[0,0] == 1.0
    
def unittest_correlations_above_threshold():
    # Not testing with values outside of normal coefficient range because in 
    # runtime the correlation matrix is generated by pd.corr()
    corr_mat = np.array([[-0.5, -0.5001, 0.0],
                        [0.5001, 0.4999, 1]])
    df = pd.DataFrame(data=corr_mat)
    corr_mat_upper, corr_mat_lower = metoder.correlations_above_threshold(df, 0.5, -0.5)
    
    assert len(corr_mat_upper) == 2
    assert len(corr_mat_lower) == 2














